import ply.lex as lex


# –≠—Ç–æ "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞" —è–∑—ã–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ "schedule" ‚Äî
# –º—ã –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–æ–±–æ–µ —Å–ª–æ–≤–æ (SCHEDULE), –∞ –Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∏–º—è.
reserved = {
    'schedule': 'SCHEDULE',
    'unavailable': 'UNAVAILABLE',
    'def': 'DEF',
    'call': 'CALL',
    'batch': 'BATCH',
    'if': 'IF',
    'else': 'ELSE',
    'query': 'QUERY',
    'filter': 'FILTER'
}


# –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö "—Ç–∏–ø–æ–≤ —Å–ª–æ–≤", –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∞.
# –ù–∞–ø—Ä–∏–º–µ—Ä: ID ‚Äî –∏–º—è, STRING ‚Äî —Å—Ç—Ä–æ–∫–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, COLON ‚Äî —Å–∏–º–≤–æ–ª –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ —Ç.–¥.
tokens = [
    'ID', 'STRING', 'COLON',   # ID = –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ, STRING = —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö, COLON = :
    'EQ', 'NEQ', 'LT', 'GT',   # EQ = ==, NEQ = !=, LT = <, GT = >
    'LPAREN', 'RPAREN'         # –°–∫–æ–±–∫–∏ ( –∏ )
] + list(reserved.values())    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (schedule, call –∏ —Ç.–ø.)

# –¢–µ–ø–µ—Ä—å –º—ã –≥–æ–≤–æ—Ä–∏–º: –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ ":" ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω COLON
t_COLON = r':'
# –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è == ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω EQ (—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ)
t_EQ = r'=='
# != ‚Äî —ç—Ç–æ NEQ (–Ω–µ —Ä–∞–≤–Ω–æ)
t_NEQ = r'!='
# < ‚Äî —ç—Ç–æ LT (–º–µ–Ω—å—à–µ), > ‚Äî GT (–±–æ–ª—å—à–µ)
t_LT = r'<'
t_GT = r'>'
# –°–∫–æ–±–∫–∏
t_LPAREN = r'\('     # –õ–µ–≤–∞—è —Å–∫–æ–±–∫–∞ (
t_RPAREN = r'\)'     # –ü—Ä–∞–≤–∞—è —Å–∫–æ–±–∫–∞ )
# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã (–æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã)
t_ignore = ' \t'


# –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: "hello"
def t_STRING(t):
    r'"[^"\n]*"'                   # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ: —Å—Ç—Ä–æ–∫–∞ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö, –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    t.value = t.value.strip('"')   # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏
    print(f"üéØ STRING: {t.value}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É
    return t                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω (–æ–¥–∏–Ω –∫—É—Å–æ—á–µ–∫ —Ç–µ–∫—Å—Ç–∞)


# –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–æ—Å—å –æ–±—ã—á–Ω–æ–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, task –∏–ª–∏ person)
def t_ID(t):
    r'[a-zA-Z_][a-zA-Z0-9_]*'       # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª–æ: —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    t.type = reserved.get(t.value, 'ID')  # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'def')?
    print(f"üÜî {t.type}: {t.value}")       # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ —Å–ª–æ–≤–æ –∏ –µ–≥–æ —Ç–∏–ø
    return t                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω


# –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–æ–∫)
def t_newline(t):
    r'\n+'                          # –ò—â–µ–º –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫–∏
    t.lexer.lineno += len(t.value) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏


# –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
def t_error(t):
    print(f"Illegal character: {t.value[0]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–æ–π —Å–∏–º–≤–æ–ª –±—ã–ª –æ—à–∏–±–æ—á–Ω—ã–º
    t.lexer.skip(1)                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Å–∏–º–≤–æ–ª –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ


# –í–∫–ª—é—á–∞–µ–º –ª–µ–∫—Å–µ—Ä (–∑–∞–ø—É—Å–∫–∞–µ–º "–º–æ–∑–≥", –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤—ã—à–µ)
lexer = lex.lex()
