import json

DATA_FILE = 'lss-backend/data_store.json'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

variables = {}  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ def


def load_data():
    try:
        with open(DATA_FILE, 'r') as f:  # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
            return json.load(f)          # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ JSON –≤ –æ–±—ã—á–Ω—ã–π Python-—Å–ª–æ–≤–∞—Ä—å
    except:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–≤—É–º—è —Å–ø–∏—Å–∫–∞–º–∏
        return {'schedule': [], 'unavailable': []}


def save_data(data):
    with open(DATA_FILE, 'w') as f:     # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ)
        json.dump(data, f, indent=2)    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Ç–µ–∫—Å—Ç JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ (—á—Ç–æ–±—ã –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–æ –≤–∏–¥–Ω–æ)


def execute_command(cmd, data=None):
    if data is None:
        data = load_data()

    ctype = cmd.get("type")

    if ctype == 'schedule':
        if 'filter' not in cmd:
            data['schedule'].append(cmd)

    elif ctype == 'unavailable':
        data['unavailable'].append(cmd)

    elif ctype == 'def':
        variables[cmd['name']] = cmd['body']

    elif ctype == 'call':
        block = variables.get(cmd['name'])
        if block:
            for sub in block:
                data = execute_command(sub, data)  # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    elif ctype == 'if':
        branch = cmd['then'] if eval_condition(cmd['cond']) else cmd['else']
        for sub in branch:
            data = execute_command(sub, data)

    elif ctype == 'batch':
        for sub in cmd['commands']:
            data = execute_command(sub, data)

    elif ctype == 'query':
        results = data.get(cmd['type'], [])
        filt = cmd.get('filter')
        if filt:
            field, op, value = filt
            if op == '==':
                results = [r for r in results if r.get(field) == value]
            print("\nüîé Query results:", results)

    return data  # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


def eval_condition(cond):
    left, op, right = cond  # –†–∞–∑–±–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏

    if op == '==': return left == right      # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–≤–Ω–æ
    if op == '!=': return left != right      # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —Ä–∞–≤–Ω–æ
    if op == '<': return left < right        # –ú–µ–Ω—å—à–µ
    if op == '>': return left > right        # –ë–æ–ª—å—à–µ

    return False  # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False (–∫–∞–∫ –±—É–¥—Ç–æ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ–µ)

