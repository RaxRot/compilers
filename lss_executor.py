import json

DATA_FILE = 'lss-backend/data_store.json'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

variables = {}  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ def


def load_data():
    try:
        with open(DATA_FILE, 'r') as f:  # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
            return json.load(f)          # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ JSON –≤ –æ–±—ã—á–Ω—ã–π Python-—Å–ª–æ–≤–∞—Ä—å
    except:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–≤—É–º—è —Å–ø–∏—Å–∫–∞–º–∏
        return {'schedule': [], 'unavailable': []}


def save_data(data):
    with open(DATA_FILE, 'w') as f:     # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ)
        json.dump(data, f, indent=2)    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Ç–µ–∫—Å—Ç JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ (—á—Ç–æ–±—ã –±—ã–ª–æ –∫—Ä–∞—Å–∏–≤–æ –≤–∏–¥–Ω–æ)


def execute_command(cmd, data=None):
    if data is None:
        data = load_data()  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞

    ctype = cmd.get("type")  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: schedule, call, if, query –∏ —Ç.–¥.)


    # === schedule ===
    if ctype == 'schedule':
        if 'filter' not in cmd:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å (query), –∞ –æ–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞
            data['schedule'].append(cmd)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
            save_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª



    # === unavailable ===
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    elif ctype == 'unavailable':
        data['unavailable'].append(cmd)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–µ–π
        save_data(data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª




    # === def ===
    elif ctype == 'def':
        variables[cmd['name']] = cmd['body']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –µ—ë –∫–æ–º–∞–Ω–¥—ã (–≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞)




    # === call ===
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    elif ctype == 'call':
        block = variables.get(cmd['name'])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ–¥ —ç—Ç–∏–º –∏–º–µ–Ω–µ–º
        if block:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é ‚Äî
            for sub in block:  # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –µ—ë –∫–æ–º–∞–Ω–¥–∞–º
                execute_command(sub, data)  # –ò –≤—ã–ø–æ–ª–Ω—è–µ–º –∏—Ö



        # === if ===
        # –í—ã–ø–æ–ª–Ω—è–µ–º then –∏–ª–∏ else –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è
        elif ctype == 'if':
            # –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ç–∫—É then –∏–ª–∏ else –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Å–ª–æ–≤–∏—è
            branch = cmd['then'] if eval_condition(cmd['cond']) else cmd['else']
            for sub in branch:  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ç–∫–µ
                execute_command(sub, data)

        # === batch ===
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–¥—Ä—è–¥
        elif ctype == 'batch':
            for sub in cmd['commands']:  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
                execute_command(sub, data)  # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é

        # === query ===
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
        elif ctype == 'query':
            results = data.get(cmd['type'], [])  # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: schedule)
            filt = cmd.get('filter')  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å—Ç—Ä

            if filt:
                field, op, value = filt  # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ 3 —á–∞—Å—Ç–∏: –ø–æ–ª–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                if op == '==':  # –°–µ–π—á–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ "—Ä–∞–≤–Ω–æ"
                    results = [r for r in results if r.get(field) == value]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ

            print("\nüîé Query results:", results)  # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω


def eval_condition(cond):
    left, op, right = cond  # –†–∞–∑–±–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏

    if op == '==': return left == right      # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–≤–Ω–æ
    if op == '!=': return left != right      # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —Ä–∞–≤–Ω–æ
    if op == '<': return left < right        # –ú–µ–Ω—å—à–µ
    if op == '>': return left > right        # –ë–æ–ª—å—à–µ

    return False  # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False (–∫–∞–∫ –±—É–¥—Ç–æ —É—Å–ª–æ–≤–∏–µ –ª–æ–∂–Ω–æ–µ)

